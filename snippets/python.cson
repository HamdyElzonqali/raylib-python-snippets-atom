'.source.python':
    'Light Gray':
        'prefix': 'LIGHTGRAY'
        'body': 'LIGHTGRAY'

    'Gray':
        'prefix': 'GRAY'
        'body': 'GRAY'

    'Dark Gray':
        'prefix': 'DARKGRAY'
        'body': 'DARKGRAY'

    'Yellow':
        'prefix': 'YELLOW'
        'body': 'YELLOW'

    'Gold':
        'prefix': 'GOLD'
        'body': 'GOLD'

    'Orange':
        'prefix': 'ORANGE'
        'body': 'ORANGE'

    'Pink':
        'prefix': 'PINK'
        'body': 'PINK'

    'Red':
        'prefix': 'RED'
        'body': 'RED'

    'Maroon':
        'prefix': 'MAROON'
        'body': 'MAROON'

    'Green':
        'prefix': 'GREEN'
        'body': 'GREEN'

    'Lime':
        'prefix': 'LIME'
        'body': 'LIME'

    'Dark Green':
        'prefix': 'DARKGREEN'
        'body': 'DARKGREEN'

    'Sky Blue':
        'prefix': 'SKYBLUE'
        'body': 'SKYBLUE'

    'Blue':
        'prefix': 'BLUE'
        'body': 'BLUE'

    'Dark Blue':
        'prefix': 'DARKBLUE'
        'body': 'DARKBLUE'

    'Purple':
        'prefix': 'PURPLE'
        'body': 'PURPLE'

    'Violet':
        'prefix': 'VIOLET'
        'body': 'VIOLET'

    'Dark Purple':
        'prefix': 'DARKPURPLE'
        'body': 'DARKPURPLE'

    'Beige':
        'prefix': 'BEIGE'
        'body': 'BEIGE'

    'Brown':
        'prefix': 'BROWN'
        'body': 'BROWN'

    'Dark Brown':
        'prefix': 'DARKBROWN'
        'body': 'DARKBROWN'

    'White':
        'prefix': 'WHITE'
        'body': 'WHITE'

    'Black':
        'prefix': 'BLACK'
        'body': 'BLACK'

    'Transparent':
        'prefix': 'BLANK'
        'body': 'BLANK'

    'Magenta':
        'prefix': 'MAGENTA'
        'body': 'MAGENTA'

    'Ray White':
        'prefix': 'RAYWHITE'
        'body': 'RAYWHITE'

    'Initialize window and OpenGL context':
        'prefix': 'InitWindow()'
        'body': 'InitWindow($1)'
        'description': 'InitWindow(int width, int height, const char title)'

    'Check if KEY_ESCAPE pressed or Close icon pressed':
        'prefix': 'WindowShouldClose()'
        'body': 'WindowShouldClose()'
        'description': 'WindowShouldClose(void)'

    'Close window and unload OpenGL context':
        'prefix': 'CloseWindow()'
        'body': 'CloseWindow()'
        'description': 'CloseWindow(void)'

    'Check if window has been initialized successfully':
        'prefix': 'IsWindowReady()'
        'body': 'IsWindowReady()'
        'description': 'IsWindowReady(void)'

    'Check if window has been minimized (or lost focus)':
        'prefix': 'IsWindowMinimized()'
        'body': 'IsWindowMinimized()'
        'description': 'IsWindowMinimized(void)'

    'Check if window has been resized':
        'prefix': 'IsWindowResized()'
        'body': 'IsWindowResized()'
        'description': 'IsWindowResized(void)'

    'Check if window is currently hidden':
        'prefix': 'IsWindowHidden()'
        'body': 'IsWindowHidden()'
        'description': 'IsWindowHidden(void)'

    'Check if window is currently fullscreen':
        'prefix': 'IsWindowFullscreen()'
        'body': 'IsWindowFullscreen()'
        'description': 'IsWindowFullscreen(void)'

    'Toggle fullscreen mode (only PLATFORM_DESKTOP)':
        'prefix': 'ToggleFullscreen()'
        'body': 'ToggleFullscreen()'
        'description': 'ToggleFullscreen(void)'

    'Show the window':
        'prefix': 'UnhideWindow()'
        'body': 'UnhideWindow()'
        'description': 'UnhideWindow(void)'

    'Hide the window':
        'prefix': 'HideWindow()'
        'body': 'HideWindow()'
        'description': 'HideWindow(void)'

    'Set icon for window (only PLATFORM_DESKTOP)':
        'prefix': 'SetWindowIcon()'
        'body': 'SetWindowIcon($1)'
        'description': 'SetWindowIcon(Image image)'

    'Set title for window (only PLATFORM_DESKTOP)':
        'prefix': 'SetWindowTitle()'
        'body': 'SetWindowTitle($1)'
        'description': 'SetWindowTitle(const char title)'

    'Set window position on screen (only PLATFORM_DESKTOP)':
        'prefix': 'SetWindowPosition()'
        'body': 'SetWindowPosition($1)'
        'description': 'SetWindowPosition(int x, int y)'

    'Set monitor for the current window (fullscreen mode)':
        'prefix': 'SetWindowMonitor()'
        'body': 'SetWindowMonitor($1)'
        'description': 'SetWindowMonitor(int monitor)'

    'Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)':
        'prefix': 'SetWindowMinSize()'
        'body': 'SetWindowMinSize($1)'
        'description': 'SetWindowMinSize(int width, int height)'

    'Set window dimensions':
        'prefix': 'SetWindowSize()'
        'body': 'SetWindowSize($1)'
        'description': 'SetWindowSize(int width, int height)'

    'Get native window handle':
        'prefix': 'GetWindowHandle()'
        'body': 'GetWindowHandle()'
        'description': 'GetWindowHandle(void)'

    'Get current screen width':
        'prefix': 'GetScreenWidth()'
        'body': 'GetScreenWidth()'
        'description': 'GetScreenWidth(void)'

    'Get current screen height':
        'prefix': 'GetScreenHeight()'
        'body': 'GetScreenHeight()'
        'description': 'GetScreenHeight(void)'

    'Get number of connected monitors':
        'prefix': 'GetMonitorCount()'
        'body': 'GetMonitorCount()'
        'description': 'GetMonitorCount(void)'

    'Get primary monitor width':
        'prefix': 'GetMonitorWidth()'
        'body': 'GetMonitorWidth($1)'
        'description': 'GetMonitorWidth(int monitor)'

    'Get primary monitor height':
        'prefix': 'GetMonitorHeight()'
        'body': 'GetMonitorHeight($1)'
        'description': 'GetMonitorHeight(int monitor)'

    'Get primary monitor physical width in millimetres':
        'prefix': 'GetMonitorPhysicalWidth()'
        'body': 'GetMonitorPhysicalWidth($1)'
        'description': 'GetMonitorPhysicalWidth(int monitor)'

    'Get primary monitor physical height in millimetres':
        'prefix': 'GetMonitorPhysicalHeight()'
        'body': 'GetMonitorPhysicalHeight($1)'
        'description': 'GetMonitorPhysicalHeight(int monitor)'

    'Get window position XY on monitor':
        'prefix': 'GetWindowPosition()'
        'body': 'GetWindowPosition()'
        'description': 'GetWindowPosition(void)'

    'Set clipboard text content':
        'prefix': 'SetClipboardText()'
        'body': 'SetClipboardText($1)'
        'description': 'SetClipboardText(const char text)'

    'Shows cursor':
        'prefix': 'ShowCursor()'
        'body': 'ShowCursor()'
        'description': 'ShowCursor(void)'

    'Hides cursor':
        'prefix': 'HideCursor()'
        'body': 'HideCursor()'
        'description': 'HideCursor(void)'

    'Check if cursor is not visible':
        'prefix': 'IsCursorHidden()'
        'body': 'IsCursorHidden()'
        'description': 'IsCursorHidden(void)'

    'Enables cursor (unlock cursor)':
        'prefix': 'EnableCursor()'
        'body': 'EnableCursor()'
        'description': 'EnableCursor(void)'

    'Disables cursor (lock cursor)':
        'prefix': 'DisableCursor()'
        'body': 'DisableCursor()'
        'description': 'DisableCursor(void)'

    'Set background color (framebuffer clear color)':
        'prefix': 'ClearBackground()'
        'body': 'ClearBackground($1)'
        'description': 'ClearBackground(Color color)'

    'Setup canvas (framebuffer) to start drawing':
        'prefix': 'BeginDrawing()'
        'body': 'BeginDrawing()'
        'description': 'BeginDrawing(void)'

    'End canvas drawing and swap buffers (double buffering)':
        'prefix': 'EndDrawing()'
        'body': 'EndDrawing()'
        'description': 'EndDrawing(void)'

    'Initialize 2D mode with custom camera (2D)':
        'prefix': 'BeginMode2D()'
        'body': 'BeginMode2D($1)'
        'description': 'BeginMode2D(Camera2D camera)'

    'Ends 2D mode with custom camera':
        'prefix': 'EndMode2D()'
        'body': 'EndMode2D()'
        'description': 'EndMode2D(void)'

    'Initializes 3D mode with custom camera (3D)':
        'prefix': 'BeginMode3D()'
        'body': 'BeginMode3D($1)'
        'description': 'BeginMode3D(Camera3D camera)'

    'Ends 3D mode and returns to default 2D orthographic mode':
        'prefix': 'EndMode3D()'
        'body': 'EndMode3D()'
        'description': 'EndMode3D(void)'

    'Initializes render texture for drawing':
        'prefix': 'BeginTextureMode()'
        'body': 'BeginTextureMode($1)'
        'description': 'BeginTextureMode(RenderTexture2D target)'

    'Ends drawing to render texture':
        'prefix': 'EndTextureMode()'
        'body': 'EndTextureMode()'
        'description': 'EndTextureMode(void)'

    'Begin scissor mode (define screen area for following drawing)':
        'prefix': 'BeginScissorMode()'
        'body': 'BeginScissorMode($1)'
        'description': 'BeginScissorMode(int x, int y, int width, int height)'

    'End scissor mode':
        'prefix': 'EndScissorMode()'
        'body': 'EndScissorMode()'
        'description': 'EndScissorMode(void)'

    'Returns a ray trace from mouse position':
        'prefix': 'GetMouseRay()'
        'body': 'GetMouseRay($1)'
        'description': 'GetMouseRay(Vector2 mousePosition, Camera camera)'

    'Returns camera transform matrix (view matrix)':
        'prefix': 'GetCameraMatrix()'
        'body': 'GetCameraMatrix($1)'
        'description': 'GetCameraMatrix(Camera camera)'

    'Returns camera 2d transform matrix':
        'prefix': 'GetCameraMatrix2D()'
        'body': 'GetCameraMatrix2D($1)'
        'description': 'GetCameraMatrix2D(Camera2D camera)'

    'Returns the screen space position for a 3d world space position':
        'prefix': 'GetWorldToScreen()'
        'body': 'GetWorldToScreen($1)'
        'description': 'GetWorldToScreen(Vector3 position, Camera camera)'

    'Returns size position for a 3d world space position':
        'prefix': 'GetWorldToScreenEx()'
        'body': 'GetWorldToScreenEx($1)'
        'description': 'GetWorldToScreenEx(Vector3 position, Camera camera,int width, int height)'

    'Returns the screen space position for a 2d camera world space position':
        'prefix': 'GetWorldToScreen2D()'
        'body': 'GetWorldToScreen2D($1)'
        'description': 'GetWorldToScreen2D(Vector2 position, Camera2D camera)'

    'Returns the world space position for a 2d camera screen space position':
        'prefix': 'GetScreenToWorld2D()'
        'body': 'GetScreenToWorld2D($1)'
        'description': 'GetScreenToWorld2D(Vector2 position, Camera2D camera)'

    'Set target FPS (maximum)':
        'prefix': 'SetTargetFPS()'
        'body': 'SetTargetFPS($1)'
        'description': 'SetTargetFPS(int fps)'

    'Returns current FPS':
        'prefix': 'GetFPS()'
        'body': 'GetFPS()'
        'description': 'GetFPS(void)'

    'Returns time in seconds for last frame drawn':
        'prefix': 'GetFrameTime()'
        'body': 'GetFrameTime()'
        'description': 'GetFrameTime(void)'

    'Returns elapsed time in seconds since InitWindow()':
        'prefix': 'GetTime()'
        'body': 'GetTime()'
        'description': 'GetTime(void)'

    'Returns hexadecimal value for a Color':
        'prefix': 'ColorToInt()'
        'body': 'ColorToInt($1)'
        'description': 'ColorToInt(Color color)'

    'Returns color normalized as float [0..1]':
        'prefix': 'ColorNormalize()'
        'body': 'ColorNormalize($1)'
        'description': 'ColorNormalize(Color color)'

    'Returns color from normalized values [0..1]':
        'prefix': 'ColorFromNormalized()'
        'body': 'ColorFromNormalized($1)'
        'description': 'ColorFromNormalized(Vector4 normalized)'

    'Returns HSV values for a Color':
        'prefix': 'ColorToHSV()'
        'body': 'ColorToHSV($1)'
        'description': 'ColorToHSV(Color color)'

    'Returns a Color from HSV values':
        'prefix': 'ColorFromHSV()'
        'body': 'ColorFromHSV($1)'
        'description': 'ColorFromHSV(Vector3 hsv)'

    'Returns a Color struct from hexadecimal value':
        'prefix': 'GetColor()'
        'body': 'GetColor($1)'
        'description': 'GetColor(int hexValue)'

    'Color fade-in or fade-out, alpha goes from 0.0f to 1.0f':
        'prefix': 'Fade()'
        'body': 'Fade($1)'
        'description': 'Fade(Color color, float alpha)'

    'Setup window configuration flags (view FLAGS)':
        'prefix': 'SetConfigFlags()'
        'body': 'SetConfigFlags($1)'
        'description': 'SetConfigFlags(unsigned int flags)'

    'Set the current threshold (minimum) log level':
        'prefix': 'SetTraceLogLevel()'
        'body': 'SetTraceLogLevel($1)'
        'description': 'SetTraceLogLevel(int logType)'

    'Set the exit threshold (minimum) log level':
        'prefix': 'SetTraceLogExit()'
        'body': 'SetTraceLogExit($1)'
        'description': 'SetTraceLogExit(int logType)'

    'Set a trace log callback to enable custom logging':
        'prefix': 'SetTraceLogCallback()'
        'body': 'SetTraceLogCallback($1)'
        'description': 'SetTraceLogCallback(TraceLogCallback callback)'

    'Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR)':
        'prefix': 'TraceLog()'
        'body': 'TraceLog($1)'
        'description': 'TraceLog(int logType, const char text, ...)'

    'Takes a screenshot of current screen (saved a .png)':
        'prefix': 'TakeScreenshot()'
        'body': 'TakeScreenshot($1)'
        'description': 'TakeScreenshot(const char fileName)'

    'Returns a random value between min and max (both included)':
        'prefix': 'GetRandomValue()'
        'body': 'GetRandomValue($1)'
        'description': 'GetRandomValue(int min, int max)'

    'Save data to file from byte array (write)':
        'prefix': 'SaveFileData()'
        'body': 'SaveFileData($1)'
        'description': 'SaveFileData(const char fileName, void data, int bytesToWrite)'

    'Save text data to file (write), string must be \' \' terminated':
        'prefix': 'SaveFileText()'
        'body': 'SaveFileText($1)'
        'description': 'SaveFileText(const char fileName, char text)'

    'Check if file exists':
        'prefix': 'FileExists()'
        'body': 'FileExists($1)'
        'description': 'FileExists(const char fileName)'

    'Check file extension':
        'prefix': 'IsFileExtension()'
        'body': 'IsFileExtension($1)'
        'description': 'IsFileExtension(const char fileName, const char ext)'

    'Check if a directory path exists':
        'prefix': 'DirectoryExists()'
        'body': 'DirectoryExists($1)'
        'description': 'DirectoryExists(const char dirPath)'

    'Clear directory files paths buffers (free memory)':
        'prefix': 'ClearDirectoryFiles()'
        'body': 'ClearDirectoryFiles()'
        'description': 'ClearDirectoryFiles(void)'

    'Change working directory, returns true if success':
        'prefix': 'ChangeDirectory()'
        'body': 'ChangeDirectory($1)'
        'description': 'ChangeDirectory(const char dir)'

    'Check if a file has been dropped into window':
        'prefix': 'IsFileDropped()'
        'body': 'IsFileDropped()'
        'description': 'IsFileDropped(void)'

    'Clear dropped files paths buffer (free memory)':
        'prefix': 'ClearDroppedFiles()'
        'body': 'ClearDroppedFiles()'
        'description': 'ClearDroppedFiles(void)'

    'Load integer value from storage file (from defined position)':
        'prefix': 'LoadStorageValue()'
        'body': 'LoadStorageValue($1)'
        'description': 'LoadStorageValue(int position)'

    'Save integer value to storage file (to defined position)':
        'prefix': 'SaveStorageValue()'
        'body': 'SaveStorageValue($1)'
        'description': 'SaveStorageValue(int position, int value)'

    'Open URL with default system browser (if available)':
        'prefix': 'OpenURL()'
        'body': 'OpenURL($1)'
        'description': 'OpenURL(const char url)'

    'Detect if a key has been pressed once':
        'prefix': 'IsKeyPressed()'
        'body': 'IsKeyPressed($1)'
        'description': 'IsKeyPressed(int key)'

    'Detect if a key is being pressed':
        'prefix': 'IsKeyDown()'
        'body': 'IsKeyDown($1)'
        'description': 'IsKeyDown(int key)'

    'Detect if a key has been released once':
        'prefix': 'IsKeyReleased()'
        'body': 'IsKeyReleased($1)'
        'description': 'IsKeyReleased(int key)'

    'Detect if a key is NOT being pressed':
        'prefix': 'IsKeyUp()'
        'body': 'IsKeyUp($1)'
        'description': 'IsKeyUp(int key)'

    'Get latest key pressed':
        'prefix': 'GetKeyPressed()'
        'body': 'GetKeyPressed()'
        'description': 'GetKeyPressed(void)'

    'Set a custom key to exit program (default is ESC)':
        'prefix': 'SetExitKey()'
        'body': 'SetExitKey($1)'
        'description': 'SetExitKey(int key)'

    'Detect if a gamepad is available':
        'prefix': 'IsGamepadAvailable()'
        'body': 'IsGamepadAvailable($1)'
        'description': 'IsGamepadAvailable(int gamepad)'

    'Check gamepad name (if available)':
        'prefix': 'IsGamepadName()'
        'body': 'IsGamepadName($1)'
        'description': 'IsGamepadName(int gamepad, const char name)'

    'Detect if a gamepad button has been pressed once':
        'prefix': 'IsGamepadButtonPressed()'
        'body': 'IsGamepadButtonPressed($1)'
        'description': 'IsGamepadButtonPressed(int gamepad, int button)'

    'Detect if a gamepad button is being pressed':
        'prefix': 'IsGamepadButtonDown()'
        'body': 'IsGamepadButtonDown($1)'
        'description': 'IsGamepadButtonDown(int gamepad, int button)'

    'Detect if a gamepad button has been released once':
        'prefix': 'IsGamepadButtonReleased()'
        'body': 'IsGamepadButtonReleased($1)'
        'description': 'IsGamepadButtonReleased(int gamepad, int button)'

    'Detect if a gamepad button is NOT being pressed':
        'prefix': 'IsGamepadButtonUp()'
        'body': 'IsGamepadButtonUp($1)'
        'description': 'IsGamepadButtonUp(int gamepad, int button)'

    'Get the last gamepad button pressed':
        'prefix': 'GetGamepadButtonPressed()'
        'body': 'GetGamepadButtonPressed()'
        'description': 'GetGamepadButtonPressed(void)'

    'Return gamepad axis count for a gamepad':
        'prefix': 'GetGamepadAxisCount()'
        'body': 'GetGamepadAxisCount($1)'
        'description': 'GetGamepadAxisCount(int gamepad)'

    'Return axis movement value for a gamepad axis':
        'prefix': 'GetGamepadAxisMovement()'
        'body': 'GetGamepadAxisMovement($1)'
        'description': 'GetGamepadAxisMovement(int gamepad, int axis)'

    'Detect if a mouse button has been pressed once':
        'prefix': 'IsMouseButtonPressed()'
        'body': 'IsMouseButtonPressed($1)'
        'description': 'IsMouseButtonPressed(int button)'

    'Detect if a mouse button is being pressed':
        'prefix': 'IsMouseButtonDown()'
        'body': 'IsMouseButtonDown($1)'
        'description': 'IsMouseButtonDown(int button)'

    'Detect if a mouse button has been released once':
        'prefix': 'IsMouseButtonReleased()'
        'body': 'IsMouseButtonReleased($1)'
        'description': 'IsMouseButtonReleased(int button)'

    'Detect if a mouse button is NOT being pressed':
        'prefix': 'IsMouseButtonUp()'
        'body': 'IsMouseButtonUp($1)'
        'description': 'IsMouseButtonUp(int button)'

    'Returns mouse position X':
        'prefix': 'GetMouseX()'
        'body': 'GetMouseX()'
        'description': 'GetMouseX(void)'

    'Returns mouse position Y':
        'prefix': 'GetMouseY()'
        'body': 'GetMouseY()'
        'description': 'GetMouseY(void)'

    'Returns mouse position XY':
        'prefix': 'GetMousePosition()'
        'body': 'GetMousePosition()'
        'description': 'GetMousePosition(void)'

    'Set mouse position XY':
        'prefix': 'SetMousePosition()'
        'body': 'SetMousePosition($1)'
        'description': 'SetMousePosition(int x, int y)'

    'Set mouse offset':
        'prefix': 'SetMouseOffset()'
        'body': 'SetMouseOffset($1)'
        'description': 'SetMouseOffset(int offsetX, int offsetY)'

    'Set mouse scaling':
        'prefix': 'SetMouseScale()'
        'body': 'SetMouseScale($1)'
        'description': 'SetMouseScale(float scaleX, float scaleY)'

    'Returns mouse wheel movement Y':
        'prefix': 'GetMouseWheelMove()'
        'body': 'GetMouseWheelMove()'
        'description': 'GetMouseWheelMove(void)'

    'Returns touch position X for touch point 0 (relative to screen size)':
        'prefix': 'GetTouchX()'
        'body': 'GetTouchX()'
        'description': 'GetTouchX(void)'

    'Returns touch position Y for touch point 0 (relative to screen size)':
        'prefix': 'GetTouchY()'
        'body': 'GetTouchY()'
        'description': 'GetTouchY(void)'

    'Returns touch position XY for a touch point index (relative to screen size)':
        'prefix': 'GetTouchPosition()'
        'body': 'GetTouchPosition($1)'
        'description': 'GetTouchPosition(int index)'

    'Enable a set of gestures using flags':
        'prefix': 'SetGesturesEnabled()'
        'body': 'SetGesturesEnabled($1)'
        'description': 'SetGesturesEnabled(unsigned int gestureFlags)'

    'Check if a gesture have been detected':
        'prefix': 'IsGestureDetected()'
        'body': 'IsGestureDetected($1)'
        'description': 'IsGestureDetected(int gesture)'

    'Get latest detected gesture':
        'prefix': 'GetGestureDetected()'
        'body': 'GetGestureDetected()'
        'description': 'GetGestureDetected(void)'

    'Get touch points count':
        'prefix': 'GetTouchPointsCount()'
        'body': 'GetTouchPointsCount()'
        'description': 'GetTouchPointsCount(void)'

    'Get gesture hold time in milliseconds':
        'prefix': 'GetGestureHoldDuration()'
        'body': 'GetGestureHoldDuration()'
        'description': 'GetGestureHoldDuration(void)'

    'Get gesture drag vector':
        'prefix': 'GetGestureDragVector()'
        'body': 'GetGestureDragVector()'
        'description': 'GetGestureDragVector(void)'

    'Get gesture drag angle':
        'prefix': 'GetGestureDragAngle()'
        'body': 'GetGestureDragAngle()'
        'description': 'GetGestureDragAngle(void)'

    'Get gesture pinch delta':
        'prefix': 'GetGesturePinchVector()'
        'body': 'GetGesturePinchVector()'
        'description': 'GetGesturePinchVector(void)'

    'Get gesture pinch angle':
        'prefix': 'GetGesturePinchAngle()'
        'body': 'GetGesturePinchAngle()'
        'description': 'GetGesturePinchAngle(void)'

    'Set camera mode (multiple camera modes available)':
        'prefix': 'SetCameraMode()'
        'body': 'SetCameraMode($1)'
        'description': 'SetCameraMode(Camera camera, int mode)'

    'Update camera position for selected mode':
        'prefix': 'UpdateCamera()'
        'body': 'UpdateCamera($1)'
        'description': 'UpdateCamera(Camera camera)'

    'Set camera pan key to combine with mouse movement (free camera)':
        'prefix': 'SetCameraPanControl()'
        'body': 'SetCameraPanControl($1)'
        'description': 'SetCameraPanControl(int panKey)'

    'Set camera alt key to combine with mouse movement (free camera)':
        'prefix': 'SetCameraAltControl()'
        'body': 'SetCameraAltControl($1)'
        'description': 'SetCameraAltControl(int altKey)'

    'Set camera smooth zoom key to combine with mouse (free camera)':
        'prefix': 'SetCameraSmoothZoomControl()'
        'body': 'SetCameraSmoothZoomControl($1)'
        'description': 'SetCameraSmoothZoomControl(int szKey)'

    'Set camera move controls (1st person and 3rd person cameras)':
        'prefix': 'SetCameraMoveControls()'
        'body': 'SetCameraMoveControls($1)'
        'description': 'SetCameraMoveControls(int frontKey, int backKey, int rightKey, int leftKey, int upKey, int downKey)'

    'Draw a pixel':
        'prefix': 'DrawPixel()'
        'body': 'DrawPixel($1)'
        'description': 'DrawPixel(int posX, int posY, Color color)'

    'Draw a pixel (Vector version)':
        'prefix': 'DrawPixelV()'
        'body': 'DrawPixelV($1)'
        'description': 'DrawPixelV(Vector2 position, Color color)'

    'Draw a line':
        'prefix': 'DrawLine()'
        'body': 'DrawLine($1)'
        'description': 'DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color)'

    'Draw a line (Vector version)':
        'prefix': 'DrawLineV()'
        'body': 'DrawLineV($1)'
        'description': 'DrawLineV(Vector2 startPos, Vector2 endPos, Color color)'

    'Draw a line defining thickness':
        'prefix': 'DrawLineEx()'
        'body': 'DrawLineEx($1)'
        'description': 'DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color)'

    'Draw a line using cubic-bezier curves in-out':
        'prefix': 'DrawLineBezier()'
        'body': 'DrawLineBezier($1)'
        'description': 'DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color)'

    'Draw lines sequence':
        'prefix': 'DrawLineStrip()'
        'body': 'DrawLineStrip($1)'
        'description': 'DrawLineStrip(Vector2 points, int numPoints, Color color)'

    'Draw a color-filled circle':
        'prefix': 'DrawCircle()'
        'body': 'DrawCircle($1)'
        'description': 'DrawCircle(int centerX, int centerY, float radius, Color color)'

    'Draw a piece of a circle':
        'prefix': 'DrawCircleSector()'
        'body': 'DrawCircleSector($1)'
        'description': 'DrawCircleSector(Vector2 center, float radius, int startAngle, int endAngle, int segments, Color color)'

    'Draw circle sector outline':
        'prefix': 'DrawCircleSectorLines()'
        'body': 'DrawCircleSectorLines($1)'
        'description': 'DrawCircleSectorLines(Vector2 center, float radius, int startAngle, int endAngle, int segments, Color color)'

    'Draw a gradient-filled circle':
        'prefix': 'DrawCircleGradient()'
        'body': 'DrawCircleGradient($1)'
        'description': 'DrawCircleGradient(int centerX, int centerY, float radius, Color color1, Color color2)'

    'Draw a color-filled circle (Vector version)':
        'prefix': 'DrawCircleV()'
        'body': 'DrawCircleV($1)'
        'description': 'DrawCircleV(Vector2 center, float radius, Color color)'

    'Draw circle outline':
        'prefix': 'DrawCircleLines()'
        'body': 'DrawCircleLines($1)'
        'description': 'DrawCircleLines(int centerX, int centerY, float radius, Color color)'

    'Draw ellipse':
        'prefix': 'DrawEllipse()'
        'body': 'DrawEllipse($1)'
        'description': 'DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, Color color)'

    'Draw ellipse outline':
        'prefix': 'DrawEllipseLines()'
        'body': 'DrawEllipseLines($1)'
        'description': 'DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, Color color)'

    'Draw ring':
        'prefix': 'DrawRing()'
        'body': 'DrawRing($1)'
        'description': 'DrawRing(Vector2 center, float innerRadius, float outerRadius, int startAngle, int endAngle, int segments, Color color)'

    'Draw ring outline':
        'prefix': 'DrawRingLines()'
        'body': 'DrawRingLines($1)'
        'description': 'DrawRingLines(Vector2 center, float innerRadius, float outerRadius, int startAngle, int endAngle, int segments, Color color)'

    'Draw a color-filled rectangle':
        'prefix': 'DrawRectangle()'
        'body': 'DrawRectangle($1)'
        'description': 'DrawRectangle(int posX, int posY, int width, int height, Color color)'

    'Draw a color-filled rectangle (Vector version)':
        'prefix': 'DrawRectangleV()'
        'body': 'DrawRectangleV($1)'
        'description': 'DrawRectangleV(Vector2 position, Vector2 size, Color color)'

    'Draw a defined color-filled rectangle':
        'prefix': 'DrawRectangleRec()'
        'body': 'DrawRectangleRec($1)'
        'description': 'DrawRectangleRec(Rectangle rec, Color color)'

    'Draw a color-filled rectangle with pro parameters':
        'prefix': 'DrawRectanglePro()'
        'body': 'DrawRectanglePro($1)'
        'description': 'DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color)'

    'Draw a vertical-gradient-filled rectangle':
        'prefix': 'DrawRectangleGradientV()'
        'body': 'DrawRectangleGradientV($1)'
        'description': 'DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2)'

    'Draw a horizontal-gradient-filled rectangle':
        'prefix': 'DrawRectangleGradientH()'
        'body': 'DrawRectangleGradientH($1)'
        'description': 'DrawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color color2)'

    'Draw a gradient-filled rectangle with custom vertex colors':
        'prefix': 'DrawRectangleGradientEx()'
        'body': 'DrawRectangleGradientEx($1)'
        'description': 'DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4)'

    'Draw rectangle outline':
        'prefix': 'DrawRectangleLines()'
        'body': 'DrawRectangleLines($1)'
        'description': 'DrawRectangleLines(int posX, int posY, int width, int height, Color color)'

    'Draw rectangle outline with extended parameters':
        'prefix': 'DrawRectangleLinesEx()'
        'body': 'DrawRectangleLinesEx($1)'
        'description': 'DrawRectangleLinesEx(Rectangle rec, int lineThick, Color color)'

    'Draw rectangle with rounded edges':
        'prefix': 'DrawRectangleRounded()'
        'body': 'DrawRectangleRounded($1)'
        'description': 'DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color)'

    'Draw rectangle with rounded edges outline':
        'prefix': 'DrawRectangleRoundedLines()'
        'body': 'DrawRectangleRoundedLines($1)'
        'description': 'DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, int lineThick, Color color)'

    'Draw a color-filled triangle (vertex in counter-clockwise order!)':
        'prefix': 'DrawTriangle()'
        'body': 'DrawTriangle($1)'
        'description': 'DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color)'

    'Draw triangle outline (vertex in counter-clockwise order!)':
        'prefix': 'DrawTriangleLines()'
        'body': 'DrawTriangleLines($1)'
        'description': 'DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color)'

    'Draw a triangle fan defined by points (first vertex is the center)':
        'prefix': 'DrawTriangleFan()'
        'body': 'DrawTriangleFan($1)'
        'description': 'DrawTriangleFan(Vector2 points, int numPoints, Color color)'

    'Draw a triangle strip defined by points':
        'prefix': 'DrawTriangleStrip()'
        'body': 'DrawTriangleStrip($1)'
        'description': 'DrawTriangleStrip(Vector2 points, int pointsCount, Color color)'

    'Draw a regular polygon (Vector version)':
        'prefix': 'DrawPoly()'
        'body': 'DrawPoly($1)'
        'description': 'DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color)'

    'Draw a polygon outline of n sides':
        'prefix': 'DrawPolyLines()'
        'body': 'DrawPolyLines($1)'
        'description': 'DrawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color)'

    'Check collision between two rectangles':
        'prefix': 'CheckCollisionRecs()'
        'body': 'CheckCollisionRecs($1)'
        'description': 'CheckCollisionRecs(Rectangle rec1, Rectangle rec2)'

    'Check collision between two circles':
        'prefix': 'CheckCollisionCircles()'
        'body': 'CheckCollisionCircles($1)'
        'description': 'CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2)'

    'Check collision between circle and rectangle':
        'prefix': 'CheckCollisionCircleRec()'
        'body': 'CheckCollisionCircleRec($1)'
        'description': 'CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec)'

    'Get collision rectangle for two rectangles collision':
        'prefix': 'GetCollisionRec()'
        'body': 'GetCollisionRec($1)'
        'description': 'GetCollisionRec(Rectangle rec1, Rectangle rec2)'

    'Check if point is inside rectangle':
        'prefix': 'CheckCollisionPointRec()'
        'body': 'CheckCollisionPointRec($1)'
        'description': 'CheckCollisionPointRec(Vector2 point, Rectangle rec)'

    'Check if point is inside circle':
        'prefix': 'CheckCollisionPointCircle()'
        'body': 'CheckCollisionPointCircle($1)'
        'description': 'CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius)'

    'Check if point is inside a triangle':
        'prefix': 'CheckCollisionPointTriangle()'
        'body': 'CheckCollisionPointTriangle($1)'
        'description': 'CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3)'

    'Load image from file into CPU memory (RAM)':
        'prefix': 'LoadImage()'
        'body': 'LoadImage($1)'
        'description': 'LoadImage(const char fileName)'

    'Load image from Color array data (RGBA - 32bit)':
        'prefix': 'LoadImageEx()'
        'body': 'LoadImageEx($1)'
        'description': 'LoadImageEx(Color pixels, int width, int height)'

    'Load image from raw data with parameters':
        'prefix': 'LoadImagePro()'
        'body': 'LoadImagePro($1)'
        'description': 'LoadImagePro(void data, int width, int height, int format)'

    'Load image from RAW file data':
        'prefix': 'LoadImageRaw()'
        'body': 'LoadImageRaw($1)'
        'description': 'LoadImageRaw(const char fileName, int width, int height, int format, int headerSize)'

    'Unload image from CPU memory (RAM)':
        'prefix': 'UnloadImage()'
        'body': 'UnloadImage($1)'
        'description': 'UnloadImage(Image image)'

    'Export image data to file':
        'prefix': 'ExportImage()'
        'body': 'ExportImage($1)'
        'description': 'ExportImage(Image image, const char fileName)'

    'Export image as code file defining an array of bytes':
        'prefix': 'ExportImageAsCode()'
        'body': 'ExportImageAsCode($1)'
        'description': 'ExportImageAsCode(Image image, const char fileName)'

    'Get pixel data from image as a Color struct array':
        'prefix': 'GetImageData()'
        'body': 'GetImageData($1)'
        'description': 'GetImageData(Image image)'

    'Get pixel data from image as Vector4 array (float normalized)':
        'prefix': 'GetImageDataNormalized()'
        'body': 'GetImageDataNormalized($1)'
        'description': 'GetImageDataNormalized(Image image)'

    'Generate image: plain color':
        'prefix': 'GenImageColor()'
        'body': 'GenImageColor($1)'
        'description': 'GenImageColor(int width, int height, Color color)'

    'Generate image: vertical gradient':
        'prefix': 'GenImageGradientV()'
        'body': 'GenImageGradientV($1)'
        'description': 'GenImageGradientV(int width, int height, Color top, Color bottom)'

    'Generate image: horizontal gradient':
        'prefix': 'GenImageGradientH()'
        'body': 'GenImageGradientH($1)'
        'description': 'GenImageGradientH(int width, int height, Color left, Color right)'

    'Generate image: radial gradient':
        'prefix': 'GenImageGradientRadial()'
        'body': 'GenImageGradientRadial($1)'
        'description': 'GenImageGradientRadial(int width, int height, float density, Color inner, Color outer)'

    'Generate image: checked':
        'prefix': 'GenImageChecked()'
        'body': 'GenImageChecked($1)'
        'description': 'GenImageChecked(int width, int height, int checksX, int checksY, Color col1, Color col2)'

    'Generate image: white noise':
        'prefix': 'GenImageWhiteNoise()'
        'body': 'GenImageWhiteNoise($1)'
        'description': 'GenImageWhiteNoise(int width, int height, float factor)'

    'Generate image: perlin noise':
        'prefix': 'GenImagePerlinNoise()'
        'body': 'GenImagePerlinNoise($1)'
        'description': 'GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale)'

    'Generate image: cellular algorithm. Bigger tileSize means bigger cells':
        'prefix': 'GenImageCellular()'
        'body': 'GenImageCellular($1)'
        'description': 'GenImageCellular(int width, int height, int tileSize)'

    'Create an image duplicate (useful for transformations)':
        'prefix': 'ImageCopy()'
        'body': 'ImageCopy($1)'
        'description': 'ImageCopy(Image image)'

    'Create an image from another image piece':
        'prefix': 'ImageFromImage()'
        'body': 'ImageFromImage($1)'
        'description': 'ImageFromImage(Image image, Rectangle rec)'

    'Create an image from text (default font)':
        'prefix': 'ImageText()'
        'body': 'ImageText($1)'
        'description': 'ImageText(const char text, int fontSize, Color color)'

    'Create an image from text (custom sprite font)':
        'prefix': 'ImageTextEx()'
        'body': 'ImageTextEx($1)'
        'description': 'ImageTextEx(Font font, const char text, float fontSize, float spacing, Color tint)'

    'Convert image to POT (power-of-two)':
        'prefix': 'ImageToPOT()'
        'body': 'ImageToPOT($1)'
        'description': 'ImageToPOT(Image image, Color fillColor)'

    'Convert image data to desired format':
        'prefix': 'ImageFormat()'
        'body': 'ImageFormat($1)'
        'description': 'ImageFormat(Image image, int newFormat)'

    'Apply alpha mask to image':
        'prefix': 'ImageAlphaMask()'
        'body': 'ImageAlphaMask($1)'
        'description': 'ImageAlphaMask(Image image, Image alphaMask)'

    'Clear alpha channel to desired color':
        'prefix': 'ImageAlphaClear()'
        'body': 'ImageAlphaClear($1)'
        'description': 'ImageAlphaClear(Image image, Color color, float threshold)'

    'Crop image depending on alpha value':
        'prefix': 'ImageAlphaCrop()'
        'body': 'ImageAlphaCrop($1)'
        'description': 'ImageAlphaCrop(Image image, float threshold)'

    'Premultiply alpha channel':
        'prefix': 'ImageAlphaPremultiply()'
        'body': 'ImageAlphaPremultiply($1)'
        'description': 'ImageAlphaPremultiply(Image image)'

    'Crop an image to a defined rectangle':
        'prefix': 'ImageCrop()'
        'body': 'ImageCrop($1)'
        'description': 'ImageCrop(Image image, Rectangle crop)'

    'Resize image (Bicubic scaling algorithm)':
        'prefix': 'ImageResize()'
        'body': 'ImageResize($1)'
        'description': 'ImageResize(Image image, int newWidth, int newHeight)'

    'Resize image (Nearest-Neighbor scaling algorithm)':
        'prefix': 'ImageResizeNN()'
        'body': 'ImageResizeNN($1)'
        'description': 'ImageResizeNN(Image image, int newWidth,int newHeight)'

    'Resize canvas and fill with color':
        'prefix': 'ImageResizeCanvas()'
        'body': 'ImageResizeCanvas($1)'
        'description': 'ImageResizeCanvas(Image image, int newWidth, int newHeight, int offsetX, int offsetY, Color color)'

    'Generate all mipmap levels for a provided image':
        'prefix': 'ImageMipmaps()'
        'body': 'ImageMipmaps($1)'
        'description': 'ImageMipmaps(Image image)'

    'Dither image data to 16bpp or lower (Floyd-Steinberg dithering)':
        'prefix': 'ImageDither()'
        'body': 'ImageDither($1)'
        'description': 'ImageDither(Image image, int rBpp, int gBpp, int bBpp, int aBpp)'

    'Flip image vertically':
        'prefix': 'ImageFlipVertical()'
        'body': 'ImageFlipVertical($1)'
        'description': 'ImageFlipVertical(Image image)'

    'Flip image horizontally':
        'prefix': 'ImageFlipHorizontal()'
        'body': 'ImageFlipHorizontal($1)'
        'description': 'ImageFlipHorizontal(Image image)'

    'Rotate image clockwise 90deg':
        'prefix': 'ImageRotateCW()'
        'body': 'ImageRotateCW($1)'
        'description': 'ImageRotateCW(Image image)'

    'Rotate image counter-clockwise 90deg':
        'prefix': 'ImageRotateCCW()'
        'body': 'ImageRotateCCW($1)'
        'description': 'ImageRotateCCW(Image image)'

    'Modify image color: tint':
        'prefix': 'ImageColorTint()'
        'body': 'ImageColorTint($1)'
        'description': 'ImageColorTint(Image image, Color color)'

    'Modify image color: invert':
        'prefix': 'ImageColorInvert()'
        'body': 'ImageColorInvert($1)'
        'description': 'ImageColorInvert(Image image)'

    'Modify image color: grayscale':
        'prefix': 'ImageColorGrayscale()'
        'body': 'ImageColorGrayscale($1)'
        'description': 'ImageColorGrayscale(Image image)'

    'Modify image color: contrast (-100 to 100)':
        'prefix': 'ImageColorContrast()'
        'body': 'ImageColorContrast($1)'
        'description': 'ImageColorContrast(Image image, float contrast)'

    'Modify image color: brightness (-255 to 255)':
        'prefix': 'ImageColorBrightness()'
        'body': 'ImageColorBrightness($1)'
        'description': 'ImageColorBrightness(Image image, int brightness)'

    'Modify image color: replace color':
        'prefix': 'ImageColorReplace()'
        'body': 'ImageColorReplace($1)'
        'description': 'ImageColorReplace(Image image, Color color, Color replace)'

    'Extract color palette from image to maximum size (memory should be freed)':
        'prefix': 'ImageExtractPalette()'
        'body': 'ImageExtractPalette($1)'
        'description': 'ImageExtractPalette(Image image, int maxPaletteSize, int extractCount)'

    'Get image alpha border rectangle':
        'prefix': 'GetImageAlphaBorder()'
        'body': 'GetImageAlphaBorder($1)'
        'description': 'GetImageAlphaBorder(Image image, float threshold)'

    'Clear image background with given color':
        'prefix': 'ImageClearBackground()'
        'body': 'ImageClearBackground($1)'
        'description': 'ImageClearBackground(Image dst, Color color)'

    'Draw pixel within an image':
        'prefix': 'ImageDrawPixel()'
        'body': 'ImageDrawPixel($1)'
        'description': 'ImageDrawPixel(Image dst, int posX, int posY, Color color)'

    'Draw pixel within an image (Vector version)':
        'prefix': 'ImageDrawPixelV()'
        'body': 'ImageDrawPixelV($1)'
        'description': 'ImageDrawPixelV(Image dst, Vector2 position, Color color)'

    'Draw line within an image':
        'prefix': 'ImageDrawLine()'
        'body': 'ImageDrawLine($1)'
        'description': 'ImageDrawLine(Image dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color)'

    'Draw line within an image (Vector version)':
        'prefix': 'ImageDrawLineV()'
        'body': 'ImageDrawLineV($1)'
        'description': 'ImageDrawLineV(Image dst, Vector2 start, Vector2 end, Color color)'

    'Draw circle within an image':
        'prefix': 'ImageDrawCircle()'
        'body': 'ImageDrawCircle($1)'
        'description': 'ImageDrawCircle(Image dst, int centerX, int centerY, int radius, Color color)'

    'Draw circle within an image (Vector version)':
        'prefix': 'ImageDrawCircleV()'
        'body': 'ImageDrawCircleV($1)'
        'description': 'ImageDrawCircleV(Image dst, Vector2 center, int radius, Color color)'

    'Draw rectangle within an image':
        'prefix': 'ImageDrawRectangle()'
        'body': 'ImageDrawRectangle($1)'
        'description': 'ImageDrawRectangle(Image dst, int posX, int posY, int width, int height, Color color)'

    'Draw rectangle within an image (Vector version)':
        'prefix': 'ImageDrawRectangleV()'
        'body': 'ImageDrawRectangleV($1)'
        'description': 'ImageDrawRectangleV(Image dst, Vector2 position, Vector2 size, Color color)'

    'Draw defined rectangle within an image':
        'prefix': 'ImageDrawRectangleRec()'
        'body': 'ImageDrawRectangleRec($1)'
        'description': 'ImageDrawRectangleRec(Image dst, Rectangle rec, Color color)'

    'Draw rectangle lines within an image':
        'prefix': 'ImageDrawRectangleLines()'
        'body': 'ImageDrawRectangleLines($1)'
        'description': 'ImageDrawRectangleLines(Image dst, Rectangle rec, int thick, Color color)'

    'Draw a source image within a destination image (tint applied to source)':
        'prefix': 'ImageDraw()'
        'body': 'ImageDraw($1)'
        'description': 'ImageDraw(Image dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint)'

    'Draw text (default font) within an image (destination)':
        'prefix': 'ImageDrawText()'
        'body': 'ImageDrawText($1)'
        'description': 'ImageDrawText(Image dst, Vector2 position, const char text, int fontSize, Color color)'

    'Draw text (custom sprite font) within an image (destination)':
        'prefix': 'ImageDrawTextEx()'
        'body': 'ImageDrawTextEx($1)'
        'description': 'ImageDrawTextEx(Image dst, Vector2 position, Font font, const char text, float fontSize, float spacing, Color color)'

    'Unload texture from GPU memory (VRAM)':
        'prefix': 'UnloadTexture()'
        'body': 'UnloadTexture($1)'
        'description': 'UnloadTexture(Texture2D texture)'

    'Unload render texture from GPU memory (VRAM)':
        'prefix': 'UnloadRenderTexture()'
        'body': 'UnloadRenderTexture($1)'
        'description': 'UnloadRenderTexture(RenderTexture2D target)'

    'Update GPU texture with new data':
        'prefix': 'UpdateTexture()'
        'body': 'UpdateTexture($1)'
        'description': 'UpdateTexture(Texture2D texture, const void pixels)'

    'Get pixel data from GPU texture and return an Image':
        'prefix': 'GetTextureData()'
        'body': 'GetTextureData($1)'
        'description': 'GetTextureData(Texture2D texture)'

    'Get pixel data from screen buffer and return an Image (screenshot)':
        'prefix': 'GetScreenData()'
        'body': 'GetScreenData()'
        'description': 'GetScreenData(void)'

    'Generate GPU mipmaps for a texture':
        'prefix': 'GenTextureMipmaps()'
        'body': 'GenTextureMipmaps($1)'
        'description': 'GenTextureMipmaps(Texture2D texture)'

    'Set texture scaling filter mode':
        'prefix': 'SetTextureFilter()'
        'body': 'SetTextureFilter($1)'
        'description': 'SetTextureFilter(Texture2D texture, int filterMode)'

    'Set texture wrapping mode':
        'prefix': 'SetTextureWrap()'
        'body': 'SetTextureWrap($1)'
        'description': 'SetTextureWrap(Texture2D texture, int wrapMode)'

    'Draw a Texture2D':
        'prefix': 'DrawTexture()'
        'body': 'DrawTexture($1)'
        'description': 'DrawTexture(Texture2D texture, int posX, int posY, Color tint)'

    'Draw a Texture2D with position defined as Vector2':
        'prefix': 'DrawTextureV()'
        'body': 'DrawTextureV($1)'
        'description': 'DrawTextureV(Texture2D texture, Vector2 position, Color tint)'

    'Draw a Texture2D with extended parameters':
        'prefix': 'DrawTextureEx()'
        'body': 'DrawTextureEx($1)'
        'description': 'DrawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color tint)'

    'Draw a part of a texture defined by a rectangle':
        'prefix': 'DrawTextureRec()'
        'body': 'DrawTextureRec($1)'
        'description': 'DrawTextureRec(Texture2D texture, Rectangle sourceRec, Vector2 position, Color tint)'

    'Draw texture quad with tiling and offset parameters':
        'prefix': 'DrawTextureQuad()'
        'body': 'DrawTextureQuad($1)'
        'description': 'DrawTextureQuad(Texture2D texture, Vector2 tiling, Vector2 offset, Rectangle quad, Color tint)'

    'Draw a part of a texture defined by a rectangle with \'pro\' parameters':
        'prefix': 'DrawTexturePro()'
        'body': 'DrawTexturePro($1)'
        'description': 'DrawTexturePro(Texture2D texture, Rectangle sourceRec, Rectangle destRec, Vector2 origin, float rotation, Color tint)'

    'Draws a texture (or part of it) that stretches or shrinks nicely':
        'prefix': 'DrawTextureNPatch()'
        'body': 'DrawTextureNPatch($1)'
        'description': 'DrawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle destRec, Vector2 origin, float rotation, Color tint)'

    'Get pixel data size in bytes (image or texture)':
        'prefix': 'GetPixelDataSize()'
        'body': 'GetPixelDataSize($1)'
        'description': 'GetPixelDataSize(int width, int height, int format)'

    'Get the default Font':
        'prefix': 'GetFontDefault()'
        'body': 'GetFontDefault()'
        'description': 'GetFontDefault(void)'

    'Load font from file into GPU memory (VRAM)':
        'prefix': 'LoadFont()'
        'body': 'LoadFont($1)'
        'description': 'LoadFont(const char fileName)'

    'Load font from file with extended parameters':
        'prefix': 'LoadFontEx()'
        'body': 'LoadFontEx($1)'
        'description': 'LoadFontEx(const char fileName, int fontSize, int fontChars, int charsCount)'

    'Load font from Image (XNA style)':
        'prefix': 'LoadFontFromImage()'
        'body': 'LoadFontFromImage($1)'
        'description': 'LoadFontFromImage(Image image, Color key, int firstChar)'

    'Load font data for further use':
        'prefix': 'LoadFontData()'
        'body': 'LoadFontData($1)'
        'description': 'LoadFontData(const char fileName, int fontSize, int fontChars, int charsCount, int type)'

    'Generate image font atlas using chars info':
        'prefix': 'GenImageFontAtlas()'
        'body': 'GenImageFontAtlas($1)'
        'description': 'GenImageFontAtlas(const CharInfo chars, Rectangle recs, int charsCount, int fontSize, int padding, int packMethod)'

    'Unload Font from GPU memory (VRAM)':
        'prefix': 'UnloadFont()'
        'body': 'UnloadFont($1)'
        'description': 'UnloadFont(Font font)'

    'Shows current FPS':
        'prefix': 'DrawFPS()'
        'body': 'DrawFPS($1)'
        'description': 'DrawFPS(int posX, int posY)'

    'Draw text (using default font)':
        'prefix': 'DrawText()'
        'body': 'DrawText($1)'
        'description': 'DrawText(const char text, int posX, int posY, int fontSize, Color color)'

    'Draw text using font and additional parameters':
        'prefix': 'DrawTextEx()'
        'body': 'DrawTextEx($1)'
        'description': 'DrawTextEx(Font font, const char text, Vector2 position, float fontSize, float spacing, Color tint)'

    'Draw text using font inside rectangle limits':
        'prefix': 'DrawTextRec()'
        'body': 'DrawTextRec($1)'
        'description': 'DrawTextRec(Font font, const char text, Rectangle rec, float fontSize, float spacing, bool wordWrap, Color tint)'

    'Draw text using font inside rectangle limits with support for text selection':
        'prefix': 'DrawTextRecEx()'
        'body': 'DrawTextRecEx($1)'
        'description': 'DrawTextRecEx(Font font, const char text, Rectangle rec, float fontSize, float spacing, bool wordWrap, Color tint, int selectStart, int selectLength, Color selectTint, Color selectBackTint)'

    'Draw one character (codepoint)':
        'prefix': 'DrawTextCodepoint()'
        'body': 'DrawTextCodepoint($1)'
        'description': 'DrawTextCodepoint(Font font, int codepoint, Vector2 position, float scale, Color tint)'

    'Measure string width for default font':
        'prefix': 'MeasureText()'
        'body': 'MeasureText($1)'
        'description': 'MeasureText(const char text, int fontSize)'

    'Measure string size for Font':
        'prefix': 'MeasureTextEx()'
        'body': 'MeasureTextEx($1)'
        'description': 'MeasureTextEx(Font font, const char text, float fontSize, float spacing)'

    'Get index position for a unicode character on font':
        'prefix': 'GetGlyphIndex()'
        'body': 'GetGlyphIndex($1)'
        'description': 'GetGlyphIndex(Font font, int codepoint)'

    'Copy one string to another, returns bytes copied':
        'prefix': 'TextCopy()'
        'body': 'TextCopy($1)'
        'description': 'TextCopy(char dst, const char src)'

    'Check if two text string are equal':
        'prefix': 'TextIsEqual()'
        'body': 'TextIsEqual($1)'
        'description': 'TextIsEqual(const char text1, const char text2)'

    'Append text at specific position and move cursor!':
        'prefix': 'TextAppend()'
        'body': 'TextAppend($1)'
        'description': 'TextAppend(char text, const char append, int position)'

    'Find first text occurrence within a string':
        'prefix': 'TextFindIndex()'
        'body': 'TextFindIndex($1)'
        'description': 'TextFindIndex(const char text, const char find)'

    'Get integer value from text (negative values not supported)':
        'prefix': 'TextToInteger()'
        'body': 'TextToInteger($1)'
        'description': 'TextToInteger(const char text)'

    'Get all codepoints in a string, codepoints count returned by parameters':
        'prefix': 'GetCodepoints()'
        'body': 'GetCodepoints($1)'
        'description': 'GetCodepoints(const char text, int count)'

    'Get total number of characters (codepoints) in a UTF8 encoded string':
        'prefix': 'GetCodepointsCount()'
        'body': 'GetCodepointsCount($1)'
        'description': 'GetCodepointsCount(const char text)'

    'Returns next codepoint in a UTF8 encoded string; 0x3f(\'?\') is returned on failure':
        'prefix': 'GetNextCodepoint()'
        'body': 'GetNextCodepoint($1)'
        'description': 'GetNextCodepoint(const char text, int bytesProcessed)'

    'Draw a line in 3D world space':
        'prefix': 'DrawLine3D()'
        'body': 'DrawLine3D($1)'
        'description': 'DrawLine3D(Vector3 startPos, Vector3 endPos, Color color)'

    'Draw a point in 3D space, actually a small line':
        'prefix': 'DrawPoint3D()'
        'body': 'DrawPoint3D($1)'
        'description': 'DrawPoint3D(Vector3 position, Color color)'

    'Draw a circle in 3D world space':
        'prefix': 'DrawCircle3D()'
        'body': 'DrawCircle3D($1)'
        'description': 'DrawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color)'

    'Draw cube':
        'prefix': 'DrawCube()'
        'body': 'DrawCube($1)'
        'description': 'DrawCube(Vector3 position, float width, float height, float length, Color color)'

    'Draw cube (Vector version)':
        'prefix': 'DrawCubeV()'
        'body': 'DrawCubeV($1)'
        'description': 'DrawCubeV(Vector3 position, Vector3 size, Color color)'

    'Draw cube wires':
        'prefix': 'DrawCubeWires()'
        'body': 'DrawCubeWires($1)'
        'description': 'DrawCubeWires(Vector3 position, float width, float height, float length, Color color)'

    'Draw cube wires (Vector version)':
        'prefix': 'DrawCubeWiresV()'
        'body': 'DrawCubeWiresV($1)'
        'description': 'DrawCubeWiresV(Vector3 position, Vector3 size, Color color)'

    'Draw cube textured':
        'prefix': 'DrawCubeTexture()'
        'body': 'DrawCubeTexture($1)'
        'description': 'DrawCubeTexture(Texture2D texture, Vector3 position, float width, float height, float length, Color color)'

    'Draw sphere':
        'prefix': 'DrawSphere()'
        'body': 'DrawSphere($1)'
        'description': 'DrawSphere(Vector3 centerPos, float radius, Color color)'

    'Draw sphere with extended parameters':
        'prefix': 'DrawSphereEx()'
        'body': 'DrawSphereEx($1)'
        'description': 'DrawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color)'

    'Draw sphere wires':
        'prefix': 'DrawSphereWires()'
        'body': 'DrawSphereWires($1)'
        'description': 'DrawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color)'

    'Draw a cylinder/cone':
        'prefix': 'DrawCylinder()'
        'body': 'DrawCylinder($1)'
        'description': 'DrawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color)'

    'Draw a cylinder/cone wires':
        'prefix': 'DrawCylinderWires()'
        'body': 'DrawCylinderWires($1)'
        'description': 'DrawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color)'

    'Draw a plane XZ':
        'prefix': 'DrawPlane()'
        'body': 'DrawPlane($1)'
        'description': 'DrawPlane(Vector3 centerPos, Vector2 size, Color color)'

    'Draw a ray line':
        'prefix': 'DrawRay()'
        'body': 'DrawRay($1)'
        'description': 'DrawRay(Ray ray, Color color)'

    'Draw a grid (centered at (0, 0, 0))':
        'prefix': 'DrawGrid()'
        'body': 'DrawGrid($1)'
        'description': 'DrawGrid(int slices, float spacing)'

    'Draw simple gizmo':
        'prefix': 'DrawGizmo()'
        'body': 'DrawGizmo($1)'
        'description': 'DrawGizmo(Vector3 position)'

    'Load model from files (meshes and materials)':
        'prefix': 'LoadModel()'
        'body': 'LoadModel($1)'
        'description': 'LoadModel(const char fileName)'

    'Load model from generated mesh (default material)':
        'prefix': 'LoadModelFromMesh()'
        'body': 'LoadModelFromMesh($1)'
        'description': 'LoadModelFromMesh(Mesh mesh)'

    'Unload model from memory (RAM and/or VRAM)':
        'prefix': 'UnloadModel()'
        'body': 'UnloadModel($1)'
        'description': 'UnloadModel(Model model)'

    'Load meshes from model file':
        'prefix': 'LoadMeshes()'
        'body': 'LoadMeshes($1)'
        'description': 'LoadMeshes(const char fileName, int meshCount)'

    'Export mesh data to file':
        'prefix': 'ExportMesh()'
        'body': 'ExportMesh($1)'
        'description': 'ExportMesh(Mesh mesh, const char fileName)'

    'Unload mesh from memory (RAM and/or VRAM)':
        'prefix': 'UnloadMesh()'
        'body': 'UnloadMesh($1)'
        'description': 'UnloadMesh(Mesh mesh)'

    'Load materials from model file':
        'prefix': 'LoadMaterials()'
        'body': 'LoadMaterials($1)'
        'description': 'LoadMaterials(const char fileName, int materialCount)'

    'Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)':
        'prefix': 'LoadMaterialDefault()'
        'body': 'LoadMaterialDefault()'
        'description': 'LoadMaterialDefault(void)'

    'Unload material from GPU memory (VRAM)':
        'prefix': 'UnloadMaterial()'
        'body': 'UnloadMaterial($1)'
        'description': 'UnloadMaterial(Material material)'

    'Set texture for a material map type (MAP_DIFFUSE, MAP_SPECULAR...)':
        'prefix': 'SetMaterialTexture()'
        'body': 'SetMaterialTexture($1)'
        'description': 'SetMaterialTexture(Material material, int mapType, Texture2D texture)'

    'Set material for a mesh':
        'prefix': 'SetModelMeshMaterial()'
        'body': 'SetModelMeshMaterial($1)'
        'description': 'SetModelMeshMaterial(Model model, int meshId, int materialId)'

    'Load model animations from file':
        'prefix': 'LoadModelAnimations()'
        'body': 'LoadModelAnimations($1)'
        'description': 'LoadModelAnimations(const char fileName, int animsCount)'

    'Update model animation pose':
        'prefix': 'UpdateModelAnimation()'
        'body': 'UpdateModelAnimation($1)'
        'description': 'UpdateModelAnimation(Model model, ModelAnimation anim, int frame)'

    'Unload animation data':
        'prefix': 'UnloadModelAnimation()'
        'body': 'UnloadModelAnimation($1)'
        'description': 'UnloadModelAnimation(ModelAnimation anim)'

    'Check model animation skeleton match':
        'prefix': 'IsModelAnimationValid()'
        'body': 'IsModelAnimationValid($1)'
        'description': 'IsModelAnimationValid(Model model, ModelAnimation anim)'

    'Generate polygonal mesh':
        'prefix': 'GenMeshPoly()'
        'body': 'GenMeshPoly($1)'
        'description': 'GenMeshPoly(int sides, float radius)'

    'Generate plane mesh (with subdivisions)':
        'prefix': 'GenMeshPlane()'
        'body': 'GenMeshPlane($1)'
        'description': 'GenMeshPlane(float width, float length, int resX, int resZ)'

    'Generate cuboid mesh':
        'prefix': 'GenMeshCube()'
        'body': 'GenMeshCube($1)'
        'description': 'GenMeshCube(float width, float height, float length)'

    'Generate sphere mesh (standard sphere)':
        'prefix': 'GenMeshSphere()'
        'body': 'GenMeshSphere($1)'
        'description': 'GenMeshSphere(float radius, int rings, int slices)'

    'Generate half-sphere mesh (no bottom cap)':
        'prefix': 'GenMeshHemiSphere()'
        'body': 'GenMeshHemiSphere($1)'
        'description': 'GenMeshHemiSphere(float radius, int rings, int slices)'

    'Generate cylinder mesh':
        'prefix': 'GenMeshCylinder()'
        'body': 'GenMeshCylinder($1)'
        'description': 'GenMeshCylinder(float radius, float height, int slices)'

    'Generate torus mesh':
        'prefix': 'GenMeshTorus()'
        'body': 'GenMeshTorus($1)'
        'description': 'GenMeshTorus(float radius, float size, int radSeg, int sides)'

    'Generate trefoil knot mesh':
        'prefix': 'GenMeshKnot()'
        'body': 'GenMeshKnot($1)'
        'description': 'GenMeshKnot(float radius, float size, int radSeg, int sides)'

    'Generate heightmap mesh from image data':
        'prefix': 'GenMeshHeightmap()'
        'body': 'GenMeshHeightmap($1)'
        'description': 'GenMeshHeightmap(Image heightmap, Vector3 size)'

    'Generate cubes-based map mesh from image data':
        'prefix': 'GenMeshCubicmap()'
        'body': 'GenMeshCubicmap($1)'
        'description': 'GenMeshCubicmap(Image cubicmap, Vector3 cubeSize)'

    'Compute mesh bounding box limits':
        'prefix': 'MeshBoundingBox()'
        'body': 'MeshBoundingBox($1)'
        'description': 'MeshBoundingBox(Mesh mesh)'

    'Compute mesh tangents':
        'prefix': 'MeshTangents()'
        'body': 'MeshTangents($1)'
        'description': 'MeshTangents(Mesh mesh)'

    'Compute mesh binormals':
        'prefix': 'MeshBinormals()'
        'body': 'MeshBinormals($1)'
        'description': 'MeshBinormals(Mesh mesh)'

    'Draw a model (with texture if set)':
        'prefix': 'DrawModel()'
        'body': 'DrawModel($1)'
        'description': 'DrawModel(Model model, Vector3 position, float scale, Color tint)'

    'Draw a model with extended parameters':
        'prefix': 'DrawModelEx()'
        'body': 'DrawModelEx($1)'
        'description': 'DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint)'

    'Draw a model wires (with texture if set)':
        'prefix': 'DrawModelWires()'
        'body': 'DrawModelWires($1)'
        'description': 'DrawModelWires(Model model, Vector3 position, float scale, Color tint)'

    'Draw a model wires (with texture if set) with extended parameters':
        'prefix': 'DrawModelWiresEx()'
        'body': 'DrawModelWiresEx($1)'
        'description': 'DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint)'

    'Draw bounding box (wires)':
        'prefix': 'DrawBoundingBox()'
        'body': 'DrawBoundingBox($1)'
        'description': 'DrawBoundingBox(BoundingBox box, Color color)'

    'Draw a billboard texture':
        'prefix': 'DrawBillboard()'
        'body': 'DrawBillboard($1)'
        'description': 'DrawBillboard(Camera camera, Texture2D texture, Vector3 center, float size, Color tint)'

    'Draw a billboard texture defined by sourceRec':
        'prefix': 'DrawBillboardRec()'
        'body': 'DrawBillboardRec($1)'
        'description': 'DrawBillboardRec(Camera camera, Texture2D texture, Rectangle sourceRec, Vector3 center, float size, Color tint)'

    'Detect collision between two spheres':
        'prefix': 'CheckCollisionSpheres()'
        'body': 'CheckCollisionSpheres($1)'
        'description': 'CheckCollisionSpheres(Vector3 centerA, float radiusA, Vector3 centerB, float radiusB)'

    'Detect collision between two bounding boxes':
        'prefix': 'CheckCollisionBoxes()'
        'body': 'CheckCollisionBoxes($1)'
        'description': 'CheckCollisionBoxes(BoundingBox box1, BoundingBox box2)'

    'Detect collision between box and sphere':
        'prefix': 'CheckCollisionBoxSphere()'
        'body': 'CheckCollisionBoxSphere($1)'
        'description': 'CheckCollisionBoxSphere(BoundingBox box, Vector3 center, float radius)'

    'Detect collision between ray and sphere':
        'prefix': 'CheckCollisionRaySphere()'
        'body': 'CheckCollisionRaySphere($1)'
        'description': 'CheckCollisionRaySphere(Ray ray, Vector3 center, float radius)'

    'Detect collision between ray and sphere, returns collision point':
        'prefix': 'CheckCollisionRaySphereEx()'
        'body': 'CheckCollisionRaySphereEx($1)'
        'description': 'CheckCollisionRaySphereEx(Ray ray, Vector3 center, float radius, Vector3 collisionPoint)'

    'Detect collision between ray and box':
        'prefix': 'CheckCollisionRayBox()'
        'body': 'CheckCollisionRayBox($1)'
        'description': 'CheckCollisionRayBox(Ray ray, BoundingBox box)'

    'Get collision info between ray and model':
        'prefix': 'GetCollisionRayModel()'
        'body': 'GetCollisionRayModel($1)'
        'description': 'GetCollisionRayModel(Ray ray, Model model)'

    'Get collision info between ray and triangle':
        'prefix': 'GetCollisionRayTriangle()'
        'body': 'GetCollisionRayTriangle($1)'
        'description': 'GetCollisionRayTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3)'

    'Get collision info between ray and ground plane (Y-normal plane)':
        'prefix': 'GetCollisionRayGround()'
        'body': 'GetCollisionRayGround($1)'
        'description': 'GetCollisionRayGround(Ray ray, float groundHeight)'

    'Load shader from files and bind default locations':
        'prefix': 'LoadShader()'
        'body': 'LoadShader($1)'
        'description': 'LoadShader(const char vsFileName, const char fsFileName)'

    'Load shader from code strings and bind default locations':
        'prefix': 'LoadShaderCode()'
        'body': 'LoadShaderCode($1)'
        'description': 'LoadShaderCode(char vsCode, char fsCode)'

    'Unload shader from GPU memory (VRAM)':
        'prefix': 'UnloadShader()'
        'body': 'UnloadShader($1)'
        'description': 'UnloadShader(Shader shader)'

    'Get default shader':
        'prefix': 'GetShaderDefault()'
        'body': 'GetShaderDefault()'
        'description': 'GetShaderDefault(void)'

    'Get texture rectangle to draw shapes':
        'prefix': 'GetShapesTextureRec()'
        'body': 'GetShapesTextureRec()'
        'description': 'GetShapesTextureRec(void)'

    'Define default texture used to draw shapes':
        'prefix': 'SetShapesTexture()'
        'body': 'SetShapesTexture($1)'
        'description': 'SetShapesTexture(Texture2D texture, Rectangle source)'

    'Get shader uniform location':
        'prefix': 'GetShaderLocation()'
        'body': 'GetShaderLocation($1)'
        'description': 'GetShaderLocation(Shader shader, const char uniformName)'

    'Set shader uniform value':
        'prefix': 'SetShaderValue()'
        'body': 'SetShaderValue($1)'
        'description': 'SetShaderValue(Shader shader, int uniformLoc, const void value, int uniformType)'

    'Set shader uniform value vector':
        'prefix': 'SetShaderValueV()'
        'body': 'SetShaderValueV($1)'
        'description': 'SetShaderValueV(Shader shader, int uniformLoc, const void value, int uniformType, int count)'

    'Set shader uniform value (matrix 4x4)':
        'prefix': 'SetShaderValueMatrix()'
        'body': 'SetShaderValueMatrix($1)'
        'description': 'SetShaderValueMatrix(Shader shader, int uniformLoc, Matrix mat)'

    'Set shader uniform value for texture':
        'prefix': 'SetShaderValueTexture()'
        'body': 'SetShaderValueTexture($1)'
        'description': 'SetShaderValueTexture(Shader shader, int uniformLoc, Texture2D texture)'

    'Set a custom projection matrix (replaces internal projection matrix)':
        'prefix': 'SetMatrixProjection()'
        'body': 'SetMatrixProjection($1)'
        'description': 'SetMatrixProjection(Matrix proj)'

    'Set a custom modelview matrix (replaces internal modelview matrix)':
        'prefix': 'SetMatrixModelview()'
        'body': 'SetMatrixModelview($1)'
        'description': 'SetMatrixModelview(Matrix view)'

    'Get internal modelview matrix':
        'prefix': 'GetMatrixModelview()'
        'body': 'GetMatrixModelview($1)'
        'description': 'GetMatrixModelview()'

    'Get internal projection matrix':
        'prefix': 'GetMatrixProjection()'
        'body': 'GetMatrixProjection()'
        'description': 'GetMatrixProjection(void)'

    'Begin custom shader drawing':
        'prefix': 'BeginShaderMode()'
        'body': 'BeginShaderMode($1)'
        'description': 'BeginShaderMode(Shader shader)'

    'End custom shader drawing (use default shader)':
        'prefix': 'EndShaderMode()'
        'body': 'EndShaderMode()'
        'description': 'EndShaderMode(void)'

    'Begin blending mode (alpha, additive, multiplied)':
        'prefix': 'BeginBlendMode()'
        'body': 'BeginBlendMode($1)'
        'description': 'BeginBlendMode(int mode)'

    'End blending mode (reset to default: alpha blending)':
        'prefix': 'EndBlendMode()'
        'body': 'EndBlendMode()'
        'description': 'EndBlendMode(void)'

    'Init VR simulator for selected device parameters':
        'prefix': 'InitVrSimulator()'
        'body': 'InitVrSimulator()'
        'description': 'InitVrSimulator(void)'

    'Close VR simulator for current device':
        'prefix': 'CloseVrSimulator()'
        'body': 'CloseVrSimulator()'
        'description': 'CloseVrSimulator(void)'

    'Update VR tracking (position and orientation) and camera':
        'prefix': 'UpdateVrTracking()'
        'body': 'UpdateVrTracking($1)'
        'description': 'UpdateVrTracking(Camera camera)'

    'Set stereo rendering configuration parameters':
        'prefix': 'SetVrConfiguration()'
        'body': 'SetVrConfiguration($1)'
        'description': 'SetVrConfiguration(VrDeviceInfo info, Shader distortion)'

    'Detect if VR simulator is ready':
        'prefix': 'IsVrSimulatorReady()'
        'body': 'IsVrSimulatorReady()'
        'description': 'IsVrSimulatorReady(void)'

    'Enable/Disable VR experience':
        'prefix': 'ToggleVrMode()'
        'body': 'ToggleVrMode()'
        'description': 'ToggleVrMode(void)'

    'Begin VR simulator stereo rendering':
        'prefix': 'BeginVrDrawing()'
        'body': 'BeginVrDrawing()'
        'description': 'BeginVrDrawing(void)'

    'End VR simulator stereo rendering':
        'prefix': 'EndVrDrawing()'
        'body': 'EndVrDrawing()'
        'description': 'EndVrDrawing(void)'

    'Initialize audio device and context':
        'prefix': 'InitAudioDevice()'
        'body': 'InitAudioDevice()'
        'description': 'InitAudioDevice(void)'

    'Close the audio device and context (and music stream)':
        'prefix': 'CloseAudioDevice()'
        'body': 'CloseAudioDevice()'
        'description': 'CloseAudioDevice(void)'

    'Check if audio device is ready':
        'prefix': 'IsAudioDeviceReady()'
        'body': 'IsAudioDeviceReady()'
        'description': 'IsAudioDeviceReady(void)'

    'Set master volume (listener)':
        'prefix': 'SetMasterVolume()'
        'body': 'SetMasterVolume($1)'
        'description': 'SetMasterVolume(float volume)'

    'Load wave data from file':
        'prefix': 'LoadWave()'
        'body': 'LoadWave($1)'
        'description': 'LoadWave(const char fileName)'

    'Load wave data from raw array data':
        'prefix': 'LoadWaveEx()'
        'body': 'LoadWaveEx($1)'
        'description': 'LoadWaveEx(void data, int sampleCount, int sampleRate, int sampleSize, int channels)'

    'Load sound from file':
        'prefix': 'LoadSound()'
        'body': 'LoadSound($1)'
        'description': 'LoadSound(const char fileName)'

    'Load sound from wave data':
        'prefix': 'LoadSoundFromWave()'
        'body': 'LoadSoundFromWave($1)'
        'description': 'LoadSoundFromWave(Wave wave)'

    'Update sound buffer with new data':
        'prefix': 'UpdateSound()'
        'body': 'UpdateSound($1)'
        'description': 'UpdateSound(Sound sound, const void data, int samplesCount)'

    'Unload wave data':
        'prefix': 'UnloadWave()'
        'body': 'UnloadWave($1)'
        'description': 'UnloadWave(Wave wave)'

    'Unload sound':
        'prefix': 'UnloadSound()'
        'body': 'UnloadSound($1)'
        'description': 'UnloadSound(Sound sound)'

    'Export wave data to file':
        'prefix': 'ExportWave()'
        'body': 'ExportWave($1)'
        'description': 'ExportWave(Wave wave, const char fileName)'

    'Export wave sample data to code (.h)':
        'prefix': 'ExportWaveAsCode()'
        'body': 'ExportWaveAsCode($1)'
        'description': 'ExportWaveAsCode(Wave wave, const char fileName)'

    'Play a sound':
        'prefix': 'PlaySound()'
        'body': 'PlaySound($1)'
        'description': 'PlaySound(Sound sound)'

    'Stop playing a sound':
        'prefix': 'StopSound()'
        'body': 'StopSound($1)'
        'description': 'StopSound(Sound sound)'

    'Pause a sound':
        'prefix': 'PauseSound()'
        'body': 'PauseSound($1)'
        'description': 'PauseSound(Sound sound)'

    'Resume a paused sound':
        'prefix': 'ResumeSound()'
        'body': 'ResumeSound($1)'
        'description': 'ResumeSound(Sound sound)'

    'Play a sound (using multichannel buffer pool)':
        'prefix': 'PlaySoundMulti()'
        'body': 'PlaySoundMulti($1)'
        'description': 'PlaySoundMulti(Sound sound)'

    'Stop any sound playing (using multichannel buffer pool)':
        'prefix': 'StopSoundMulti()'
        'body': 'StopSoundMulti()'
        'description': 'StopSoundMulti(void)'

    'Get number of sounds playing in the multichannel':
        'prefix': 'GetSoundsPlaying()'
        'body': 'GetSoundsPlaying()'
        'description': 'GetSoundsPlaying(void)'

    'Check if a sound is currently playing':
        'prefix': 'IsSoundPlaying()'
        'body': 'IsSoundPlaying($1)'
        'description': 'IsSoundPlaying(Sound sound)'

    'Set volume for a sound (1.0 is max level)':
        'prefix': 'SetSoundVolume()'
        'body': 'SetSoundVolume($1)'
        'description': 'SetSoundVolume(Sound sound, float volume)'

    'Set pitch for a sound (1.0 is base level)':
        'prefix': 'SetSoundPitch()'
        'body': 'SetSoundPitch($1)'
        'description': 'SetSoundPitch(Sound sound, float pitch)'

    'Convert wave data to desired format':
        'prefix': 'WaveFormat()'
        'body': 'WaveFormat($1)'
        'description': 'WaveFormat(Wave wave, int sampleRate, int sampleSize, int channels)'

    'Copy a wave to a new wave':
        'prefix': 'WaveCopy()'
        'body': 'WaveCopy($1)'
        'description': 'WaveCopy(Wave wave)'

    'Crop a wave to defined samples range':
        'prefix': 'WaveCrop()'
        'body': 'WaveCrop($1)'
        'description': 'WaveCrop(Wave wave, int initSample, int finalSample)'

    'Get samples data from wave as a floats array':
        'prefix': 'GetWaveData()'
        'body': 'GetWaveData($1)'
        'description': 'GetWaveData(Wave wave)'

    'Load music stream from file':
        'prefix': 'LoadMusicStream()'
        'body': 'LoadMusicStream($1)'
        'description': 'LoadMusicStream(const char fileName)'

    'Unload music stream':
        'prefix': 'UnloadMusicStream()'
        'body': 'UnloadMusicStream($1)'
        'description': 'UnloadMusicStream(Music music)'

    'Start music playing':
        'prefix': 'PlayMusicStream()'
        'body': 'PlayMusicStream($1)'
        'description': 'PlayMusicStream(Music music)'

    'Updates buffers for music streaming':
        'prefix': 'UpdateMusicStream()'
        'body': 'UpdateMusicStream($1)'
        'description': 'UpdateMusicStream(Music music)'

    'Stop music playing':
        'prefix': 'StopMusicStream()'
        'body': 'StopMusicStream($1)'
        'description': 'StopMusicStream(Music music)'

    'Pause music playing':
        'prefix': 'PauseMusicStream()'
        'body': 'PauseMusicStream($1)'
        'description': 'PauseMusicStream(Music music)'

    'Resume playing paused music':
        'prefix': 'ResumeMusicStream()'
        'body': 'ResumeMusicStream($1)'
        'description': 'ResumeMusicStream(Music music)'

    'Check if music is playing':
        'prefix': 'IsMusicPlaying()'
        'body': 'IsMusicPlaying($1)'
        'description': 'IsMusicPlaying(Music music)'

    'Set volume for music (1.0 is max level)':
        'prefix': 'SetMusicVolume()'
        'body': 'SetMusicVolume($1)'
        'description': 'SetMusicVolume(Music music, float volume)'

    'Set pitch for a music (1.0 is base level)':
        'prefix': 'SetMusicPitch()'
        'body': 'SetMusicPitch($1)'
        'description': 'SetMusicPitch(Music music, float pitch)'

    'Set music loop count (loop repeats)':
        'prefix': 'SetMusicLoopCount()'
        'body': 'SetMusicLoopCount($1)'
        'description': 'SetMusicLoopCount(Music music, int count)'

    'Get music time length (in seconds)':
        'prefix': 'GetMusicTimeLength()'
        'body': 'GetMusicTimeLength($1)'
        'description': 'GetMusicTimeLength(Music music)'

    'Get current music time played (in seconds)':
        'prefix': 'GetMusicTimePlayed()'
        'body': 'GetMusicTimePlayed($1)'
        'description': 'GetMusicTimePlayed(Music music)'

    'Init audio stream (to stream raw audio pcm data)':
        'prefix': 'InitAudioStream()'
        'body': 'InitAudioStream($1)'
        'description': 'InitAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels)'

    'Update audio stream buffers with data':
        'prefix': 'UpdateAudioStream()'
        'body': 'UpdateAudioStream($1)'
        'description': 'UpdateAudioStream(AudioStream stream, const void data, int samplesCount)'

    'Close audio stream and free memory':
        'prefix': 'CloseAudioStream()'
        'body': 'CloseAudioStream($1)'
        'description': 'CloseAudioStream(AudioStream stream)'

    'Check if any audio stream buffers requires refill':
        'prefix': 'IsAudioBufferProcessed()'
        'body': 'IsAudioBufferProcessed($1)'
        'description': 'IsAudioBufferProcessed(AudioStream stream)'

    'Play audio stream':
        'prefix': 'PlayAudioStream()'
        'body': 'PlayAudioStream($1)'
        'description': 'PlayAudioStream(AudioStream stream)'

    'Pause audio stream':
        'prefix': 'PauseAudioStream()'
        'body': 'PauseAudioStream($1)'
        'description': 'PauseAudioStream(AudioStream stream)'

    'Resume audio stream':
        'prefix': 'ResumeAudioStream()'
        'body': 'ResumeAudioStream($1)'
        'description': 'ResumeAudioStream(AudioStream stream)'

    'Check if audio stream is playing':
        'prefix': 'IsAudioStreamPlaying()'
        'body': 'IsAudioStreamPlaying($1)'
        'description': 'IsAudioStreamPlaying(AudioStream stream)'

    'Stop audio stream':
        'prefix': 'StopAudioStream()'
        'body': 'StopAudioStream($1)'
        'description': 'StopAudioStream(AudioStream stream)'

    'Set volume for audio stream (1.0 is max level)':
        'prefix': 'SetAudioStreamVolume()'
        'body': 'SetAudioStreamVolume($1)'
        'description': 'SetAudioStreamVolume(AudioStream stream, float volume)'

    'Set pitch for audio stream (1.0 is base level)':
        'prefix': 'SetAudioStreamPitch()'
        'body': 'SetAudioStreamPitch($1)'
        'description': 'SetAudioStreamPitch(AudioStream stream, float pitch)'
